{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rin\\\\Desktop\\\\Projects\\\\discord-clone\\\\client\\\\src\\\\components\\\\Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { io } from \"socket.io-client\";\nimport { UserContext } from \"../context/UserContext\";\nimport { LoginContext } from \"../context/LoginContext\";\nimport { ServerContext } from \"../context/ServerContext\";\nimport styles from \"./Chat.module.css\";\nimport ChatBar from \"./ChatBar\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:4000/\", {\n  transports: [\"websocket\", \"polling\"]\n});\n\nconst Chat = () => {\n  _s();\n\n  const {\n    serverList,\n    setServerList\n  } = useContext(ServerContext);\n  const {\n    isLoggedIn,\n    setIsLoggedIn\n  } = useContext(LoginContext);\n  const {\n    loginInfo,\n    setLoginInfo\n  } = useContext(UserContext);\n  const [message, setMessage] = useState(\"\");\n  const [showServer, setShowServer] = useState(null);\n  const {\n    id\n  } = useParams();\n\n  const handleMouseEnter = id => {\n    setShowServer(id);\n  };\n\n  const handleMouseLeave = id => {\n    setShowServer(null);\n  };\n\n  const handleSendMessage = e => {\n    if (e.key === \"Enter\") {\n      socket.emit(\"message\", {\n        message,\n        id\n      });\n      e.target.value = \"\";\n    }\n  };\n\n  socket.emit(\"join\", id);\n  useEffect(() => {\n    socket.emit(\"changeRoom\", id);\n    socket.on(\"message\", _ref => {\n      let {\n        message,\n        id\n      } = _ref;\n      serverList.map(server => {\n        if (server.name === id) {\n          server.messages.push(message);\n          console.log(server.messages);\n        }\n      });\n    });\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.chat,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.insideapp,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.server,\n        children: /*#__PURE__*/_jsxDEV(ChatBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.leftside,\n        children: serverList.map(server => {\n          return id === server.name && server.channels.map(channel => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.channel,\n              children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: [\"# \", channel.name]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 21\n              }, this)\n            }, channel.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 19\n            }, this);\n          });\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.middle,\n        children: [serverList.map(server => {\n          return id === server.name && server.messages.map(message => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.message,\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: message.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 19\n            }, this);\n          });\n        }), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => {\n            setMessage(e.target.value);\n          },\n          onKeyPress: e => handleSendMessage(e),\n          className: styles.textBox,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.rightside\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"mr60jhhztRmA8vpfSYKwV8UDwHg=\", false, function () {\n  return [useParams];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["C:/Users/Rin/Desktop/Projects/discord-clone/client/src/components/Chat.js"],"names":["React","useState","useContext","useEffect","io","UserContext","LoginContext","ServerContext","styles","ChatBar","useParams","socket","transports","Chat","serverList","setServerList","isLoggedIn","setIsLoggedIn","loginInfo","setLoginInfo","message","setMessage","showServer","setShowServer","id","handleMouseEnter","handleMouseLeave","handleSendMessage","e","key","emit","target","value","on","map","server","name","messages","push","console","log","chat","insideapp","leftside","channels","channel","middle","textBox","rightside"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\nimport { UserContext } from \"../context/UserContext\";\r\nimport { LoginContext } from \"../context/LoginContext\";\r\nimport { ServerContext } from \"../context/ServerContext\";\r\nimport styles from \"./Chat.module.css\";\r\nimport ChatBar from \"./ChatBar\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst socket = io(\"http://localhost:4000/\", {\r\n  transports: [\"websocket\", \"polling\"],\r\n});\r\n\r\nconst Chat = () => {\r\n  const { serverList, setServerList } = useContext(ServerContext);\r\n  const { isLoggedIn, setIsLoggedIn } = useContext(LoginContext);\r\n  const { loginInfo, setLoginInfo } = useContext(UserContext);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const [showServer, setShowServer] = useState(null);\r\n\r\n  const { id } = useParams();\r\n\r\n  const handleMouseEnter = (id) => {\r\n    setShowServer(id);\r\n  };\r\n  const handleMouseLeave = (id) => {\r\n    setShowServer(null);\r\n  };\r\n\r\n  const handleSendMessage = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      socket.emit(\"message\", { message, id });\r\n      e.target.value = \"\";\r\n    }\r\n  };\r\n\r\n  socket.emit(\"join\", id);\r\n\r\n  useEffect(() => {\r\n    socket.emit(\"changeRoom\", id);\r\n    socket.on(\"message\", ({ message, id }) => {\r\n      serverList.map((server) => {\r\n        if (server.name === id) {\r\n          server.messages.push(message);\r\n          console.log(server.messages);\r\n        }\r\n      });\r\n    });\r\n  }, [id]);\r\n\r\n  return (\r\n    <div className={styles.chat}>\r\n      <div className={styles.insideapp}>\r\n        <div className={styles.server}>\r\n          <ChatBar />\r\n        </div>\r\n        <div className={styles.leftside}>\r\n          {serverList.map((server) => {\r\n            return (\r\n              id === server.name &&\r\n              server.channels.map((channel) => {\r\n                return (\r\n                  <div key={channel.id} className={styles.channel}>\r\n                    <h3># {channel.name}</h3>\r\n                  </div>\r\n                );\r\n              })\r\n            );\r\n          })}\r\n        </div>\r\n        <div className={styles.middle}>\r\n          {serverList.map((server) => {\r\n            return (\r\n              id === server.name &&\r\n              server.messages.map((message) => {\r\n                return (\r\n                  <div className={styles.message}>\r\n                    <p>{message.message}</p>\r\n                  </div>\r\n                );\r\n              })\r\n            );\r\n          })}\r\n          <input\r\n            onChange={(e) => {\r\n              setMessage(e.target.value);\r\n            }}\r\n            onKeyPress={(e) => handleSendMessage(e)}\r\n            className={styles.textBox}\r\n            type=\"text\"\r\n          />\r\n        </div>\r\n        <div className={styles.rightside}></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"]},"metadata":{},"sourceType":"module"}