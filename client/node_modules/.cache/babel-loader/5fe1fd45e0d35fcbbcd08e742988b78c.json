{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rin\\\\Desktop\\\\Projects\\\\discord-clone\\\\client\\\\src\\\\components\\\\Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect, useRef } from \"react\";\nimport ClearIcon from \"@mui/icons-material/Clear\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport { io } from \"socket.io-client\";\nimport { UserContext } from \"../context/UserContext\";\nimport { LoginContext } from \"../context/LoginContext\";\nimport { ServerContext } from \"../context/ServerContext\";\nimport styles from \"./Chat.module.css\";\nimport ChatBar from \"./ChatBar\";\nimport { useParams } from \"react-router-dom\";\nimport cors from \"cors\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:4000/\", {\n  transports: [\"websocket\", \"polling\"]\n});\n\nconst Chat = () => {\n  _s();\n\n  const {\n    serverList,\n    setServerList\n  } = useContext(ServerContext);\n  const {\n    isLoggedIn,\n    setIsLoggedIn\n  } = useContext(LoginContext);\n  const {\n    loginInfo,\n    setLoginInfo\n  } = useContext(UserContext);\n  const [editMode, setEditMode] = useState(false);\n  const [editMessageId, setEditMessageId] = useState({});\n  const [message, setMessage] = useState(\"\");\n  const [showServer, setShowServer] = useState(null);\n  const {\n    email\n  } = loginInfo;\n  const {\n    id\n  } = useParams();\n  const scrollRef = useRef();\n  const messageRef = useRef();\n  const textBoxRef = useRef();\n\n  const handleMouseEnter = id => {\n    setShowServer(id);\n  };\n\n  const handleMouseLeave = id => {\n    setShowServer(null);\n  };\n\n  const handleSendMessage = e => {\n    if (e.key === \"Enter\") {\n      socket.emit(\"message\", {\n        email,\n        message,\n        id\n      });\n      e.target.value = \"\";\n    }\n  };\n\n  const handleRemove = async (e, id, email, message, _id) => {\n    if (loginInfo.email === email) {\n      await axios.delete(`http://localhost:4000/messages/`, {\n        data: {\n          id,\n          _id\n        }\n      }).then(() => {\n        socket.emit(\"deletedMessage\", {\n          email,\n          message,\n          id,\n          _id\n        });\n      });\n    }\n  };\n\n  const handleEdit = async (e, email, _id, id) => {\n    setEditMode(false);\n    setEditMessageId({});\n\n    if (loginInfo.email === email) {\n      await axios.patch(`http://localhost:4000/editMessage`, {\n        newMessage: e.target.value,\n        _id: _id,\n        id: id\n      }).then(() => {\n        e.target.value = \"\";\n        socket.emit(\"updatedMessage\", {\n          email,\n          message,\n          id,\n          _id\n        });\n      });\n    }\n  };\n\n  useEffect(() => {\n    socket.emit(\"changeRoom\", id);\n    axios.get(`http://localhost:4000/app/${id}`).then(res => {\n      const {\n        data\n      } = res;\n      const messages = [...data];\n      const newServerList = [...serverList];\n      newServerList.map(server => {\n        if (server.name == id) {\n          server.messages = messages;\n        }\n      });\n      setServerList(newServerList);\n      textBoxRef.current.focus();\n      scrollRef.current.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"end\",\n        inline: \"start\"\n      });\n    });\n  }, [id]);\n  useEffect(() => {\n    const handleMessage = _ref => {\n      let {\n        email,\n        message,\n        id,\n        _id\n      } = _ref;\n      const newServerList = [...serverList];\n      newServerList.map(server => {\n        if (server.name == id) {\n          server.messages.push({\n            email,\n            message,\n            _id\n          });\n        }\n      });\n      setServerList(newServerList);\n      scrollRef.current.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"end\",\n        inline: \"start\"\n      });\n    };\n\n    const handleMessageDelete = _ref2 => {\n      let {\n        email,\n        message,\n        id,\n        _id\n      } = _ref2;\n      const newServerList = [...serverList];\n      newServerList.map(server => {\n        if (server.name == id) {\n          server.messages = server.messages.filter(item => {\n            return item._id !== _id;\n          });\n        }\n      });\n      setServerList(newServerList);\n    };\n\n    const handleMessageUpdate = _ref3 => {\n      let {\n        email,\n        message,\n        id,\n        _id\n      } = _ref3;\n      const newServerList = [...serverList];\n      const newMessage = {\n        email,\n        message,\n        _id\n      };\n\n      for (let server in newServerList) {\n        if (newServerList[server].name == id) {\n          for (let message in newServerList[server].messages) {\n            if (newServerList[server].messages[message]._id === _id) {\n              newServerList[server].messages[message] = newMessage;\n            }\n          }\n        }\n      }\n\n      setServerList(newServerList);\n    };\n\n    socket.on(\"message\", handleMessage);\n    socket.on(\"deletedMessage\", handleMessageDelete);\n    socket.on(\"updatedMessage\", handleMessageUpdate);\n    return () => {\n      socket.off(\"message\", handleMessage);\n      socket.off(\"deletedMessage\", handleMessageDelete);\n      socket.off(\"updatedMessage\", handleMessageUpdate);\n    }; //    socket.on(\"message\", ({ email, message, id }) => {\n    //      const newServerList = [...serverList];\n    //      newServerList.map((server) => {\n    //        if (server.name == id) {\n    //          server.messages.push({ email, message });\n    //        }\n    //      });\n    //      setServerList(newServerList);\n    //      scrollRef.current.scrollIntoView({\n    //        behavior: \"smooth\",\n    //        block: \"end\",\n    //        inline: \"start\",\n    //      });\n    //    });\n    //    return () => {\n    //      socket.off(\"message\");\n    //    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.chat,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.insideapp,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.server,\n        children: /*#__PURE__*/_jsxDEV(ChatBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.leftside,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.channels,\n          children: serverList.map(server => {\n            return id === server.name && server.channels.map(channel => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.channel,\n                children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\"# \", channel.name]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 23\n                }, this)\n              }, channel.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 21\n              }, this);\n            });\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.logout,\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.middle,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.messagesView,\n          children: serverList.map(server => {\n            return id === server.name && server.messages.map((message, index) => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: scrollRef,\n                className: styles.message,\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: message.email\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: styles.messageInfo,\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    ref: messageRef,\n                    children: message.message\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 203,\n                    columnNumber: 25\n                  }, this), message.email === loginInfo.email && /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(EditIcon, {\n                      onClick: e => {\n                        textBoxRef.current.focus();\n                        setEditMode(true);\n                        setEditMessageId({\n                          _id: message._id,\n                          email: message.email\n                        });\n                      },\n                      className: styles.messageEdit\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 206,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(ClearIcon, {\n                      onClick: e => {\n                        textBoxRef.current.focus();\n                        handleRemove(e, id, message.email, message.message, message._id);\n                      },\n                      className: styles.messageRemove\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 217,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 205,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 21\n              }, this);\n            });\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: textBoxRef,\n          onChange: e => {\n            setMessage(e.target.value);\n          },\n          onKeyPress: e => editMode ? e.key === \"Enter\" && handleEdit(e, editMessageId.email, editMessageId._id, id) : handleSendMessage(e),\n          className: styles.textBox,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.rightside\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"TdygANxUmC+EWMe8njTLrGR60kg=\", false, function () {\n  return [useParams];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["C:/Users/Rin/Desktop/Projects/discord-clone/client/src/components/Chat.js"],"names":["React","useState","useContext","useEffect","useRef","ClearIcon","EditIcon","io","UserContext","LoginContext","ServerContext","styles","ChatBar","useParams","cors","axios","socket","transports","Chat","serverList","setServerList","isLoggedIn","setIsLoggedIn","loginInfo","setLoginInfo","editMode","setEditMode","editMessageId","setEditMessageId","message","setMessage","showServer","setShowServer","email","id","scrollRef","messageRef","textBoxRef","handleMouseEnter","handleMouseLeave","handleSendMessage","e","key","emit","target","value","handleRemove","_id","delete","data","then","handleEdit","patch","newMessage","get","res","messages","newServerList","map","server","name","current","focus","scrollIntoView","behavior","block","inline","handleMessage","push","handleMessageDelete","filter","item","handleMessageUpdate","on","off","chat","insideapp","leftside","channels","channel","logout","middle","messagesView","index","messageInfo","messageEdit","messageRemove","textBox","rightside"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useRef } from \"react\";\r\n\r\nimport ClearIcon from \"@mui/icons-material/Clear\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\n\r\nimport { io } from \"socket.io-client\";\r\nimport { UserContext } from \"../context/UserContext\";\r\nimport { LoginContext } from \"../context/LoginContext\";\r\nimport { ServerContext } from \"../context/ServerContext\";\r\nimport styles from \"./Chat.module.css\";\r\nimport ChatBar from \"./ChatBar\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport cors from \"cors\";\r\nimport axios from \"axios\";\r\n\r\nconst socket = io(\"http://localhost:4000/\", {\r\n  transports: [\"websocket\", \"polling\"],\r\n});\r\n\r\nconst Chat = () => {\r\n  const { serverList, setServerList } = useContext(ServerContext);\r\n  const { isLoggedIn, setIsLoggedIn } = useContext(LoginContext);\r\n  const { loginInfo, setLoginInfo } = useContext(UserContext);\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [editMessageId, setEditMessageId] = useState({});\r\n  const [message, setMessage] = useState(\"\");\r\n  const [showServer, setShowServer] = useState(null);\r\n\r\n  const { email } = loginInfo;\r\n\r\n  const { id } = useParams();\r\n\r\n  const scrollRef = useRef();\r\n  const messageRef = useRef();\r\n  const textBoxRef = useRef();\r\n\r\n  const handleMouseEnter = (id) => {\r\n    setShowServer(id);\r\n  };\r\n  const handleMouseLeave = (id) => {\r\n    setShowServer(null);\r\n  };\r\n\r\n  const handleSendMessage = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      socket.emit(\"message\", { email, message, id });\r\n      e.target.value = \"\";\r\n    }\r\n  };\r\n\r\n  const handleRemove = async (e, id, email, message, _id) => {\r\n    if (loginInfo.email === email) {\r\n      await axios\r\n        .delete(`http://localhost:4000/messages/`, {\r\n          data: { id, _id },\r\n        })\r\n        .then(() => {\r\n          socket.emit(\"deletedMessage\", { email, message, id, _id });\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleEdit = async (e, email, _id, id) => {\r\n    setEditMode(false);\r\n    setEditMessageId({});\r\n    if (loginInfo.email === email) {\r\n      await axios\r\n        .patch(`http://localhost:4000/editMessage`, {\r\n          newMessage: e.target.value,\r\n          _id: _id,\r\n          id: id,\r\n        })\r\n        .then(() => {\r\n          e.target.value = \"\";\r\n          socket.emit(\"updatedMessage\", { email, message, id, _id });\r\n        });\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    socket.emit(\"changeRoom\", id);\r\n    axios.get(`http://localhost:4000/app/${id}`).then((res) => {\r\n      const { data } = res;\r\n      const messages = [...data];\r\n      const newServerList = [...serverList];\r\n      newServerList.map((server) => {\r\n        if (server.name == id) {\r\n          server.messages = messages;\r\n        }\r\n      });\r\n      setServerList(newServerList);\r\n      textBoxRef.current.focus();\r\n      scrollRef.current.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"end\",\r\n        inline: \"start\",\r\n      });\r\n    });\r\n  }, [id]);\r\n  useEffect(() => {\r\n    const handleMessage = ({ email, message, id, _id }) => {\r\n      const newServerList = [...serverList];\r\n      newServerList.map((server) => {\r\n        if (server.name == id) {\r\n          server.messages.push({ email, message, _id });\r\n        }\r\n      });\r\n      setServerList(newServerList);\r\n      scrollRef.current.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"end\",\r\n        inline: \"start\",\r\n      });\r\n    };\r\n    const handleMessageDelete = ({ email, message, id, _id }) => {\r\n      const newServerList = [...serverList];\r\n      newServerList.map((server) => {\r\n        if (server.name == id) {\r\n          server.messages = server.messages.filter((item) => {\r\n            return item._id !== _id;\r\n          });\r\n        }\r\n      });\r\n      setServerList(newServerList);\r\n    };\r\n    const handleMessageUpdate = ({ email, message, id, _id }) => {\r\n      const newServerList = [...serverList];\r\n      const newMessage = { email, message, _id };\r\n      for (let server in newServerList) {\r\n        if (newServerList[server].name == id) {\r\n          for (let message in newServerList[server].messages) {\r\n            if (newServerList[server].messages[message]._id === _id) {\r\n              newServerList[server].messages[message] = newMessage;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      setServerList(newServerList);\r\n    };\r\n    socket.on(\"message\", handleMessage);\r\n\r\n    socket.on(\"deletedMessage\", handleMessageDelete);\r\n\r\n    socket.on(\"updatedMessage\", handleMessageUpdate);\r\n\r\n    return () => {\r\n      socket.off(\"message\", handleMessage);\r\n      socket.off(\"deletedMessage\", handleMessageDelete);\r\n      socket.off(\"updatedMessage\", handleMessageUpdate);\r\n    };\r\n    //    socket.on(\"message\", ({ email, message, id }) => {\r\n    //      const newServerList = [...serverList];\r\n    //      newServerList.map((server) => {\r\n    //        if (server.name == id) {\r\n    //          server.messages.push({ email, message });\r\n    //        }\r\n    //      });\r\n    //      setServerList(newServerList);\r\n    //      scrollRef.current.scrollIntoView({\r\n    //        behavior: \"smooth\",\r\n    //        block: \"end\",\r\n    //        inline: \"start\",\r\n    //      });\r\n    //    });\r\n    //    return () => {\r\n    //      socket.off(\"message\");\r\n    //    };\r\n  }, []);\r\n  return (\r\n    <div className={styles.chat}>\r\n      <div className={styles.insideapp}>\r\n        <div className={styles.server}>\r\n          <ChatBar />\r\n        </div>\r\n        <div className={styles.leftside}>\r\n          <div className={styles.channels}>\r\n            {serverList.map((server) => {\r\n              return (\r\n                id === server.name &&\r\n                server.channels.map((channel) => {\r\n                  return (\r\n                    <div key={channel.id} className={styles.channel}>\r\n                      <h3># {channel.name}</h3>\r\n                    </div>\r\n                  );\r\n                })\r\n              );\r\n            })}\r\n          </div>\r\n          <div className={styles.logout}>\r\n            <h5>Logout</h5>\r\n          </div>\r\n        </div>\r\n        <div className={styles.middle}>\r\n          <div className={styles.messagesView}>\r\n            {serverList.map((server) => {\r\n              return (\r\n                id === server.name &&\r\n                server.messages.map((message, index) => {\r\n                  return (\r\n                    <div ref={scrollRef} key={index} className={styles.message}>\r\n                      <p>{message.email}</p>\r\n                      <div className={styles.messageInfo}>\r\n                        <p ref={messageRef}>{message.message}</p>\r\n                        {message.email === loginInfo.email && (\r\n                          <div>\r\n                            <EditIcon\r\n                              onClick={(e) => {\r\n                                textBoxRef.current.focus();\r\n                                setEditMode(true);\r\n                                setEditMessageId({\r\n                                  _id: message._id,\r\n                                  email: message.email,\r\n                                });\r\n                              }}\r\n                              className={styles.messageEdit}\r\n                            />\r\n                            <ClearIcon\r\n                              onClick={(e) => {\r\n                                textBoxRef.current.focus();\r\n                                handleRemove(\r\n                                  e,\r\n                                  id,\r\n                                  message.email,\r\n                                  message.message,\r\n                                  message._id\r\n                                );\r\n                              }}\r\n                              className={styles.messageRemove}\r\n                            />\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })\r\n              );\r\n            })}\r\n          </div>\r\n          <input\r\n            ref={textBoxRef}\r\n            onChange={(e) => {\r\n              setMessage(e.target.value);\r\n            }}\r\n            onKeyPress={(e) =>\r\n              editMode\r\n                ? e.key === \"Enter\" &&\r\n                  handleEdit(e, editMessageId.email, editMessageId._id, id)\r\n                : handleSendMessage(e)\r\n            }\r\n            className={styles.textBox}\r\n            type=\"text\"\r\n          />\r\n        </div>\r\n        <div className={styles.rightside}></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"]},"metadata":{},"sourceType":"module"}