{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rin\\\\Desktop\\\\Projects\\\\discord-clone\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:4000\", {\n  transports: [\"websocket\", \"polling\"]\n});\n\nfunction App() {\n  _s();\n\n  const [info, setInfo] = useState({});\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    socket.on(\"message\", data => {\n      setMessages([...messages, data]);\n      console.log(messages);\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat\",\n        children: messages.map((message, index) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"messageDiv\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: message.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 26,\n                columnNumber: 19\n              }, this), \": \", message.message]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controllers\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => {\n            const newInfo = info;\n            newInfo.name = e.target.value;\n            setInfo(newInfo);\n          },\n          type: \"text\",\n          className: \"name\",\n          placeholder: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => {\n            const newInfo = info;\n            newInfo.message = e.target.value;\n            setInfo(newInfo);\n          },\n          type: \"text\",\n          className: \"message\",\n          placeholder: \"message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            socket.emit(\"message\", info);\n          },\n          className: \"submit\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"PwbwqEAcu0oKF5PI7zBVY+fJClk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Rin/Desktop/Projects/discord-clone/client/src/App.js"],"names":["React","useState","useEffect","io","socket","transports","App","info","setInfo","messages","setMessages","on","data","console","log","map","message","index","name","e","newInfo","target","value","emit"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAOC,EAAP,MAAe,kBAAf;;AAEA,MAAMC,MAAM,GAAGD,EAAE,CAAC,uBAAD,EAA0B;AACzCE,EAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,SAAd;AAD6B,CAA1B,CAAjB;;AAIA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,MAAM,CAACO,EAAP,CAAU,SAAV,EAAsBC,IAAD,IAAU;AAC7BF,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcG,IAAd,CAAD,CAAX;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACD,KAHD;AAID,GALQ,CAAT;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,kBACGA,QAAQ,CAACM,GAAT,CAAa,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAChC,8BACE;AAAK,YAAA,SAAS,EAAC,YAAf;AAAA,mCACE;AAAA,sCACE;AAAA,0BAASD,OAAO,CAACE;AAAjB;AAAA;AAAA;AAAA;AAAA,sBADF,QACoCF,OAAO,CAACA,OAD5C;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,aAAiCC,KAAjC;AAAA;AAAA;AAAA;AAAA,kBADF;AAOD,SARA;AADH;AAAA;AAAA;AAAA;AAAA,cADF,eAYE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,gCACE;AACE,UAAA,QAAQ,EAAGE,CAAD,IAAO;AACf,kBAAMC,OAAO,GAAGb,IAAhB;AACAa,YAAAA,OAAO,CAACF,IAAR,GAAeC,CAAC,CAACE,MAAF,CAASC,KAAxB;AACAd,YAAAA,OAAO,CAACY,OAAD,CAAP;AACD,WALH;AAME,UAAA,IAAI,EAAC,MANP;AAOE,UAAA,SAAS,EAAC,MAPZ;AAQE,UAAA,WAAW,EAAC;AARd;AAAA;AAAA;AAAA;AAAA,gBADF,eAWE;AACE,UAAA,QAAQ,EAAGD,CAAD,IAAO;AACf,kBAAMC,OAAO,GAAGb,IAAhB;AACAa,YAAAA,OAAO,CAACJ,OAAR,GAAkBG,CAAC,CAACE,MAAF,CAASC,KAA3B;AACAd,YAAAA,OAAO,CAACY,OAAD,CAAP;AACD,WALH;AAME,UAAA,IAAI,EAAC,MANP;AAOE,UAAA,SAAS,EAAC,SAPZ;AAQE,UAAA,WAAW,EAAC;AARd;AAAA;AAAA;AAAA;AAAA,gBAXF,eAqBE;AACE,UAAA,OAAO,EAAE,MAAM;AACbhB,YAAAA,MAAM,CAACmB,IAAP,CAAY,SAAZ,EAAuBhB,IAAvB;AACD,WAHH;AAIE,UAAA,SAAS,EAAC,QAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBArBF;AAAA;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA+CD;;GAxDQD,G;;KAAAA,G;AA0DT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport io from \"socket.io-client\";\n\nconst socket = io(\"http://localhost:4000\", {\n  transports: [\"websocket\", \"polling\"],\n});\n\nfunction App() {\n  const [info, setInfo] = useState({});\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    socket.on(\"message\", (data) => {\n      setMessages([...messages, data]);\n      console.log(messages);\n    });\n  });\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"chat\">\n          {messages.map((message, index) => {\n            return (\n              <div className=\"messageDiv\" key={index}>\n                <p>\n                  <strong>{message.name}</strong>: {message.message}\n                </p>\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"controllers\">\n          <input\n            onChange={(e) => {\n              const newInfo = info;\n              newInfo.name = e.target.value;\n              setInfo(newInfo);\n            }}\n            type=\"text\"\n            className=\"name\"\n            placeholder=\"name\"\n          />\n          <input\n            onChange={(e) => {\n              const newInfo = info;\n              newInfo.message = e.target.value;\n              setInfo(newInfo);\n            }}\n            type=\"text\"\n            className=\"message\"\n            placeholder=\"message\"\n          />\n          <button\n            onClick={() => {\n              socket.emit(\"message\", info);\n            }}\n            className=\"submit\"\n          >\n            Send\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}