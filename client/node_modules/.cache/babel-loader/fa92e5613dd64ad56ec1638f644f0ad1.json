{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rin\\\\Desktop\\\\Projects\\\\discord-clone\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Home from \"./components/Home\";\nimport Login from \"./components/Login\";\nimport Chat from \"./components/Chat\";\nimport ChatBar from \"./components/ChatBar\";\nimport { LoginContext } from \"./context/LoginContext.js\";\nimport { UserContext } from \"./context/UserContext.js\";\nimport { ServerContext } from \"./context/ServerContext\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [loginInfo, setLoginInfo] = useState({});\n  const [serverList, setServerList] = useState([{\n    id: 1,\n    name: \"Public\",\n    image: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT8479Ucg3dNkErrscpa3BemM8RUp9Z68HV7w4TJpEL1meuvgETwTvYdJXWm5A1cqkcFA8&usqp=CAU\",\n    channels: [{\n      id: 1,\n      name: \"Public Channel\"\n    }]\n  }, {\n    id: 2,\n    name: \"Fortnite\",\n    image: \"https://i.imgur.com/13RZOhj.gif\",\n    channels: [{\n      id: 1,\n      name: \"Fortnite Channel\"\n    }, {\n      id: 2,\n      name: \"Fortnite Channel 2\"\n    }]\n  }]);\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"user\");\n\n    if (loggedInUser) {\n      const foundUser = JSON.parse(loggedInUser);\n      setLoginInfo(loggedInUser);\n      setIsLoggedIn(true);\n      console.log(loggedInUser);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n        value: {\n          loginInfo,\n          setLoginInfo\n        },\n        children: /*#__PURE__*/_jsxDEV(LoginContext.Provider, {\n          value: {\n            isLoggedIn,\n            setIsLoggedIn\n          },\n          children: /*#__PURE__*/_jsxDEV(ServerContext.Provider, {\n            value: {\n              serverList,\n              setServerList\n            },\n            children: /*#__PURE__*/_jsxDEV(Switch, {\n              children: [/*#__PURE__*/_jsxDEV(Route, {\n                path: \"/login\",\n                children: isLoggedIn ? /*#__PURE__*/_jsxDEV(Redirect, {\n                  to: \"/app\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 58,\n                  columnNumber: 33\n                }, this) : /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 58,\n                  columnNumber: 58\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Route, {\n                path: `/app/:id`,\n                children: /*#__PURE__*/_jsxDEV(Chat, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Route, {\n                path: \"/app\",\n                children: !isLoggedIn ? /*#__PURE__*/_jsxDEV(Redirect, {\n                  to: \"/login\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 66,\n                  columnNumber: 21\n                }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n                  to: \"/app/Public\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Route, {\n                path: \"/\",\n                component: Home\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"jZE3rEjdOQjb+gb0x2zAi90j1os=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Rin/Desktop/Projects/discord-clone/client/src/App.js"],"names":["React","useState","useEffect","Home","Login","Chat","ChatBar","LoginContext","UserContext","ServerContext","BrowserRouter","Router","Switch","Route","Redirect","App","isLoggedIn","setIsLoggedIn","loginInfo","setLoginInfo","serverList","setServerList","id","name","image","channels","loggedInUser","localStorage","getItem","foundUser","JSON","parse","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Home from \"./components/Home\";\nimport Login from \"./components/Login\";\nimport Chat from \"./components/Chat\";\nimport ChatBar from \"./components/ChatBar\";\n\nimport { LoginContext } from \"./context/LoginContext.js\";\nimport { UserContext } from \"./context/UserContext.js\";\nimport { ServerContext } from \"./context/ServerContext\";\nimport \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [loginInfo, setLoginInfo] = useState({});\n  const [serverList, setServerList] = useState([\n    {\n      id: 1,\n      name: \"Public\",\n      image:\n        \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT8479Ucg3dNkErrscpa3BemM8RUp9Z68HV7w4TJpEL1meuvgETwTvYdJXWm5A1cqkcFA8&usqp=CAU\",\n      channels: [{ id: 1, name: \"Public Channel\" }],\n    },\n\n    {\n      id: 2,\n      name: \"Fortnite\",\n      image: \"https://i.imgur.com/13RZOhj.gif\",\n      channels: [\n        { id: 1, name: \"Fortnite Channel\" },\n        { id: 2, name: \"Fortnite Channel 2\" },\n      ],\n    },\n  ]);\n\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    if (loggedInUser) {\n      const foundUser = JSON.parse(loggedInUser);\n      setLoginInfo(loggedInUser);\n      setIsLoggedIn(true);\n      console.log(loggedInUser);\n    }\n  });\n  return (\n    <Router>\n      <div className=\"App\">\n        <UserContext.Provider value={{ loginInfo, setLoginInfo }}>\n          <LoginContext.Provider value={{ isLoggedIn, setIsLoggedIn }}>\n            <ServerContext.Provider value={{ serverList, setServerList }}>\n              <Switch>\n                <Route path=\"/login\">\n                  {isLoggedIn ? <Redirect to=\"/app\" /> : <Login />}\n                </Route>\n\n                <Route path={`/app/:id`}>\n                  <Chat />\n                </Route>\n                <Route path=\"/app\">\n                  {!isLoggedIn ? (\n                    <Redirect to=\"/login\" />\n                  ) : (\n                    <Redirect to=\"/app/Public\" />\n                  )}\n                </Route>\n                <Route path=\"/\" component={Home}></Route>\n              </Switch>\n            </ServerContext.Provider>\n          </LoginContext.Provider>\n        </UserContext.Provider>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}