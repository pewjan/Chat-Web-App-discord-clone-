{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rin\\\\Desktop\\\\Projects\\\\discord-clone\\\\client\\\\src\\\\components\\\\Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect, useRef } from \"react\";\nimport ClearIcon from \"@mui/icons-material/Clear\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport { io } from \"socket.io-client\";\nimport { UserContext } from \"../context/UserContext\";\nimport { LoginContext } from \"../context/LoginContext\";\nimport { ServerContext } from \"../context/ServerContext\";\nimport styles from \"./Chat.module.css\";\nimport ChatBar from \"./ChatBar\";\nimport { useParams } from \"react-router-dom\";\nimport cors from \"cors\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:4000/\", {\n  transports: [\"websocket\", \"polling\"]\n});\n\nconst Chat = () => {\n  _s();\n\n  const {\n    serverList,\n    setServerList\n  } = useContext(ServerContext);\n  const {\n    isLoggedIn,\n    setIsLoggedIn\n  } = useContext(LoginContext);\n  const {\n    loginInfo,\n    setLoginInfo\n  } = useContext(UserContext);\n  const [deletedMessage, setdeletedMessage] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [showServer, setShowServer] = useState(null);\n  const {\n    email\n  } = loginInfo;\n  const {\n    id\n  } = useParams();\n  const scrollRef = useRef();\n  const messageRef = useRef();\n  const textBox = useRef();\n\n  const handleMouseEnter = id => {\n    setShowServer(id);\n  };\n\n  const handleMouseLeave = id => {\n    setShowServer(null);\n  };\n\n  const handleSendMessage = e => {\n    if (e.key === \"Enter\") {\n      socket.emit(\"message\", {\n        email,\n        message,\n        id\n      });\n      e.target.value = \"\";\n    }\n  };\n\n  const handleRemove = async (e, id, email, message, _id) => {\n    if (loginInfo.email === email) {\n      await axios.delete(`http://localhost:4000/messages/`, {\n        data: {\n          id,\n          _id\n        }\n      }).then(() => {\n        socket.emit(\"deletedMessage\", {\n          email,\n          message,\n          id,\n          _id\n        });\n      });\n    }\n  };\n\n  const handleEdit = async (e, email, _id, id, newMessage) => {//if (loginInfo.email === email) {\n    //  await axios.update(`http://localhost:4000/editMessage`);\n    //}\n  };\n\n  useEffect(() => {\n    socket.emit(\"changeRoom\", id);\n    axios.get(`http://localhost:4000/app/${id}`).then(res => {\n      const {\n        data\n      } = res;\n      const messages = [...data];\n      const newServerList = [...serverList];\n      newServerList.map(server => {\n        if (server.name == id) {\n          server.messages = messages;\n        }\n      });\n      setServerList(newServerList);\n      scrollRef.current.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"end\",\n        inline: \"start\"\n      });\n    });\n  }, [id]);\n  useEffect(() => {\n    const handleMessage = _ref => {\n      let {\n        email,\n        message,\n        id,\n        _id\n      } = _ref;\n      const newServerList = [...serverList];\n      newServerList.map(server => {\n        if (server.name == id) {\n          server.messages.push({\n            email,\n            message,\n            _id\n          });\n        }\n      });\n      setServerList(newServerList);\n      scrollRef.current.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"end\",\n        inline: \"start\"\n      });\n    };\n\n    const handleMessageDelete = _ref2 => {\n      let {\n        email,\n        message,\n        id,\n        _id\n      } = _ref2;\n      const newServerList = [...serverList];\n      newServerList.map(server => {\n        if (server.name == id) {\n          server.messages = server.messages.filter(item => {\n            return item._id !== _id;\n          });\n        }\n      });\n      setServerList(newServerList);\n    };\n\n    socket.on(\"message\", handleMessage);\n    socket.on(\"deletedMessage\", handleMessageDelete);\n    return () => {\n      socket.off(\"message\", handleMessage);\n      socket.off(\"deletedMessage\", handleMessageDelete);\n    }; //    socket.on(\"message\", ({ email, message, id }) => {\n    //      const newServerList = [...serverList];\n    //      newServerList.map((server) => {\n    //        if (server.name == id) {\n    //          server.messages.push({ email, message });\n    //        }\n    //      });\n    //      setServerList(newServerList);\n    //      scrollRef.current.scrollIntoView({\n    //        behavior: \"smooth\",\n    //        block: \"end\",\n    //        inline: \"start\",\n    //      });\n    //    });\n    //    return () => {\n    //      socket.off(\"message\");\n    //    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.chat,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.insideapp,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.server,\n        children: /*#__PURE__*/_jsxDEV(ChatBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.leftside,\n        children: serverList.map(server => {\n          return id === server.name && server.channels.map(channel => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.channel,\n              children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: [\"# \", channel.name]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 21\n              }, this)\n            }, channel.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 19\n            }, this);\n          });\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.middle,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.messagesView,\n          children: serverList.map(server => {\n            return id === server.name && server.messages.map((message, index) => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: scrollRef,\n                className: styles.message,\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: message.email\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: styles.messageInfo,\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    ref: messageRef,\n                    children: message.message\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 168,\n                    columnNumber: 25\n                  }, this), message.email === loginInfo.email && /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(EditIcon, {\n                      onClick: e => {\n                        handleEdit(e, message.email, message._id, id);\n                      },\n                      className: styles.messageEdit\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 171,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(ClearIcon, {\n                      onClick: e => {\n                        handleRemove(e, id, message.email, message.message, message._id);\n                      },\n                      className: styles.messageRemove\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 177,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 170,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 21\n              }, this);\n            });\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: textBox,\n          onChange: e => {\n            setMessage(e.target.value);\n          },\n          onKeyPress: e => handleSendMessage(e),\n          className: styles.textBox,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.rightside\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"d2LNjwCHLsODGzCWSbamDean1yo=\", false, function () {\n  return [useParams];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["C:/Users/Rin/Desktop/Projects/discord-clone/client/src/components/Chat.js"],"names":["React","useState","useContext","useEffect","useRef","ClearIcon","EditIcon","io","UserContext","LoginContext","ServerContext","styles","ChatBar","useParams","cors","axios","socket","transports","Chat","serverList","setServerList","isLoggedIn","setIsLoggedIn","loginInfo","setLoginInfo","deletedMessage","setdeletedMessage","message","setMessage","showServer","setShowServer","email","id","scrollRef","messageRef","textBox","handleMouseEnter","handleMouseLeave","handleSendMessage","e","key","emit","target","value","handleRemove","_id","delete","data","then","handleEdit","newMessage","get","res","messages","newServerList","map","server","name","current","scrollIntoView","behavior","block","inline","handleMessage","push","handleMessageDelete","filter","item","on","off","chat","insideapp","leftside","channels","channel","middle","messagesView","index","messageInfo","messageEdit","messageRemove","rightside"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useRef } from \"react\";\r\n\r\nimport ClearIcon from \"@mui/icons-material/Clear\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\n\r\nimport { io } from \"socket.io-client\";\r\nimport { UserContext } from \"../context/UserContext\";\r\nimport { LoginContext } from \"../context/LoginContext\";\r\nimport { ServerContext } from \"../context/ServerContext\";\r\nimport styles from \"./Chat.module.css\";\r\nimport ChatBar from \"./ChatBar\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport cors from \"cors\";\r\nimport axios from \"axios\";\r\n\r\nconst socket = io(\"http://localhost:4000/\", {\r\n  transports: [\"websocket\", \"polling\"],\r\n});\r\n\r\nconst Chat = () => {\r\n  const { serverList, setServerList } = useContext(ServerContext);\r\n  const { isLoggedIn, setIsLoggedIn } = useContext(LoginContext);\r\n  const { loginInfo, setLoginInfo } = useContext(UserContext);\r\n  const [deletedMessage, setdeletedMessage] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [showServer, setShowServer] = useState(null);\r\n\r\n  const { email } = loginInfo;\r\n\r\n  const { id } = useParams();\r\n\r\n  const scrollRef = useRef();\r\n  const messageRef = useRef();\r\n  const textBox = useRef();\r\n\r\n  const handleMouseEnter = (id) => {\r\n    setShowServer(id);\r\n  };\r\n  const handleMouseLeave = (id) => {\r\n    setShowServer(null);\r\n  };\r\n\r\n  const handleSendMessage = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      socket.emit(\"message\", { email, message, id });\r\n      e.target.value = \"\";\r\n    }\r\n  };\r\n\r\n  const handleRemove = async (e, id, email, message, _id) => {\r\n    if (loginInfo.email === email) {\r\n      await axios\r\n        .delete(`http://localhost:4000/messages/`, {\r\n          data: { id, _id },\r\n        })\r\n        .then(() => {\r\n          socket.emit(\"deletedMessage\", { email, message, id, _id });\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleEdit = async (e, email, _id, id, newMessage) => {\r\n    //if (loginInfo.email === email) {\r\n    //  await axios.update(`http://localhost:4000/editMessage`);\r\n    //}\r\n  };\r\n  useEffect(() => {\r\n    socket.emit(\"changeRoom\", id);\r\n    axios.get(`http://localhost:4000/app/${id}`).then((res) => {\r\n      const { data } = res;\r\n      const messages = [...data];\r\n      const newServerList = [...serverList];\r\n      newServerList.map((server) => {\r\n        if (server.name == id) {\r\n          server.messages = messages;\r\n        }\r\n      });\r\n      setServerList(newServerList);\r\n      scrollRef.current.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"end\",\r\n        inline: \"start\",\r\n      });\r\n    });\r\n  }, [id]);\r\n  useEffect(() => {\r\n    const handleMessage = ({ email, message, id, _id }) => {\r\n      const newServerList = [...serverList];\r\n      newServerList.map((server) => {\r\n        if (server.name == id) {\r\n          server.messages.push({ email, message, _id });\r\n        }\r\n      });\r\n      setServerList(newServerList);\r\n      scrollRef.current.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"end\",\r\n        inline: \"start\",\r\n      });\r\n    };\r\n    const handleMessageDelete = ({ email, message, id, _id }) => {\r\n      const newServerList = [...serverList];\r\n      newServerList.map((server) => {\r\n        if (server.name == id) {\r\n          server.messages = server.messages.filter((item) => {\r\n            return item._id !== _id;\r\n          });\r\n        }\r\n      });\r\n      setServerList(newServerList);\r\n    };\r\n    socket.on(\"message\", handleMessage);\r\n\r\n    socket.on(\"deletedMessage\", handleMessageDelete);\r\n\r\n    return () => {\r\n      socket.off(\"message\", handleMessage);\r\n      socket.off(\"deletedMessage\", handleMessageDelete);\r\n    };\r\n    //    socket.on(\"message\", ({ email, message, id }) => {\r\n    //      const newServerList = [...serverList];\r\n    //      newServerList.map((server) => {\r\n    //        if (server.name == id) {\r\n    //          server.messages.push({ email, message });\r\n    //        }\r\n    //      });\r\n    //      setServerList(newServerList);\r\n    //      scrollRef.current.scrollIntoView({\r\n    //        behavior: \"smooth\",\r\n    //        block: \"end\",\r\n    //        inline: \"start\",\r\n    //      });\r\n    //    });\r\n    //    return () => {\r\n    //      socket.off(\"message\");\r\n    //    };\r\n  }, []);\r\n  return (\r\n    <div className={styles.chat}>\r\n      <div className={styles.insideapp}>\r\n        <div className={styles.server}>\r\n          <ChatBar />\r\n        </div>\r\n        <div className={styles.leftside}>\r\n          {serverList.map((server) => {\r\n            return (\r\n              id === server.name &&\r\n              server.channels.map((channel) => {\r\n                return (\r\n                  <div key={channel.id} className={styles.channel}>\r\n                    <h3># {channel.name}</h3>\r\n                  </div>\r\n                );\r\n              })\r\n            );\r\n          })}\r\n        </div>\r\n        <div className={styles.middle}>\r\n          <div className={styles.messagesView}>\r\n            {serverList.map((server) => {\r\n              return (\r\n                id === server.name &&\r\n                server.messages.map((message, index) => {\r\n                  return (\r\n                    <div ref={scrollRef} key={index} className={styles.message}>\r\n                      <p>{message.email}</p>\r\n                      <div className={styles.messageInfo}>\r\n                        <p ref={messageRef}>{message.message}</p>\r\n                        {message.email === loginInfo.email && (\r\n                          <div>\r\n                            <EditIcon\r\n                              onClick={(e) => {\r\n                                handleEdit(e, message.email, message._id, id);\r\n                              }}\r\n                              className={styles.messageEdit}\r\n                            />\r\n                            <ClearIcon\r\n                              onClick={(e) => {\r\n                                handleRemove(\r\n                                  e,\r\n                                  id,\r\n                                  message.email,\r\n                                  message.message,\r\n                                  message._id\r\n                                );\r\n                              }}\r\n                              className={styles.messageRemove}\r\n                            />\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })\r\n              );\r\n            })}\r\n          </div>\r\n          <input\r\n            ref={textBox}\r\n            onChange={(e) => {\r\n              setMessage(e.target.value);\r\n            }}\r\n            onKeyPress={(e) => handleSendMessage(e)}\r\n            className={styles.textBox}\r\n            type=\"text\"\r\n          />\r\n        </div>\r\n        <div className={styles.rightside}></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"]},"metadata":{},"sourceType":"module"}