{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rin\\\\Desktop\\\\Projects\\\\discord-clone\\\\client\\\\src\\\\components\\\\Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect, useRef } from \"react\";\nimport { io } from \"socket.io-client\";\nimport { UserContext } from \"../context/UserContext\";\nimport { LoginContext } from \"../context/LoginContext\";\nimport { ServerContext } from \"../context/ServerContext\";\nimport styles from \"./Chat.module.css\";\nimport ChatBar from \"./ChatBar\";\nimport { useParams } from \"react-router-dom\";\nimport cors from \"cors\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:4000/\", {\n  transports: [\"websocket\", \"polling\"]\n});\n\nconst Chat = () => {\n  _s();\n\n  const {\n    serverList,\n    setServerList\n  } = useContext(ServerContext);\n  const {\n    isLoggedIn,\n    setIsLoggedIn\n  } = useContext(LoginContext);\n  const {\n    loginInfo,\n    setLoginInfo\n  } = useContext(UserContext);\n  const [message, setMessage] = useState(\"\");\n  const [showServer, setShowServer] = useState(null);\n  const {\n    email\n  } = loginInfo;\n  const {\n    id\n  } = useParams();\n  const scrollRef = useRef();\n\n  const handleMouseEnter = id => {\n    setShowServer(id);\n  };\n\n  const handleMouseLeave = id => {\n    setShowServer(null);\n  };\n\n  const handleSendMessage = e => {\n    if (e.key === \"Enter\") {\n      socket.emit(\"message\", {\n        email,\n        message,\n        id\n      });\n      e.target.value = \"\";\n      scrollRef.current.scrollIntoView();\n    }\n  };\n\n  useEffect(() => {\n    socket.emit(\"changeRoom\", id);\n    axios.get(`http://localhost:4000/app/${id}`).then(res => {\n      const {\n        data\n      } = res;\n      const messages = [...data];\n      const newServerList = [...serverList];\n      newServerList.map(server => {\n        if (server.name == id) {\n          server.messages = messages;\n        }\n      });\n      setServerList(newServerList);\n    });\n  }, [id]);\n  useEffect(() => {\n    socket.off(\"message\").on(\"message\", _ref => {\n      let {\n        email,\n        message,\n        id\n      } = _ref;\n      const newServerList = [...serverList];\n      newServerList.map(server => {\n        if (server.name == id) {\n          server.messages.push({\n            email,\n            message\n          });\n        }\n      });\n      setServerList(newServerList);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.chat,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.insideapp,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.server,\n        children: /*#__PURE__*/_jsxDEV(ChatBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.leftside,\n        children: serverList.map(server => {\n          return id === server.name && server.channels.map(channel => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.channel,\n              children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: [\"# \", channel.name]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 21\n              }, this)\n            }, channel.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 19\n            }, this);\n          });\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.middle,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          ref: scrollRef,\n          className: styles.messagesView,\n          children: serverList.map(server => {\n            return id === server.name && server.messages.map((message, index) => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.message,\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [message.email, \" : \", message.message]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 23\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 21\n              }, this);\n            });\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => {\n            setMessage(e.target.value);\n          },\n          onKeyPress: e => handleSendMessage(e),\n          className: styles.textBox,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.rightside\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"0EgBqvP65r3xbmCewRYipjrrdHg=\", false, function () {\n  return [useParams];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["C:/Users/Rin/Desktop/Projects/discord-clone/client/src/components/Chat.js"],"names":["React","useState","useContext","useEffect","useRef","io","UserContext","LoginContext","ServerContext","styles","ChatBar","useParams","cors","axios","socket","transports","Chat","serverList","setServerList","isLoggedIn","setIsLoggedIn","loginInfo","setLoginInfo","message","setMessage","showServer","setShowServer","email","id","scrollRef","handleMouseEnter","handleMouseLeave","handleSendMessage","e","key","emit","target","value","current","scrollIntoView","get","then","res","data","messages","newServerList","map","server","name","off","on","push","chat","insideapp","leftside","channels","channel","middle","messagesView","index","textBox","rightside"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useRef } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\nimport { UserContext } from \"../context/UserContext\";\r\nimport { LoginContext } from \"../context/LoginContext\";\r\nimport { ServerContext } from \"../context/ServerContext\";\r\nimport styles from \"./Chat.module.css\";\r\nimport ChatBar from \"./ChatBar\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport cors from \"cors\";\r\nimport axios from \"axios\";\r\n\r\nconst socket = io(\"http://localhost:4000/\", {\r\n  transports: [\"websocket\", \"polling\"],\r\n});\r\n\r\nconst Chat = () => {\r\n  const { serverList, setServerList } = useContext(ServerContext);\r\n  const { isLoggedIn, setIsLoggedIn } = useContext(LoginContext);\r\n  const { loginInfo, setLoginInfo } = useContext(UserContext);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [showServer, setShowServer] = useState(null);\r\n\r\n  const { email } = loginInfo;\r\n\r\n  const { id } = useParams();\r\n\r\n  const scrollRef = useRef();\r\n\r\n  const handleMouseEnter = (id) => {\r\n    setShowServer(id);\r\n  };\r\n  const handleMouseLeave = (id) => {\r\n    setShowServer(null);\r\n  };\r\n\r\n  const handleSendMessage = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      socket.emit(\"message\", { email, message, id });\r\n      e.target.value = \"\";\r\n      scrollRef.current.scrollIntoView();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket.emit(\"changeRoom\", id);\r\n    axios.get(`http://localhost:4000/app/${id}`).then((res) => {\r\n      const { data } = res;\r\n      const messages = [...data];\r\n      const newServerList = [...serverList];\r\n      newServerList.map((server) => {\r\n        if (server.name == id) {\r\n          server.messages = messages;\r\n        }\r\n      });\r\n      setServerList(newServerList);\r\n    });\r\n  }, [id]);\r\n  useEffect(() => {\r\n    socket.off(\"message\").on(\"message\", ({ email, message, id }) => {\r\n      const newServerList = [...serverList];\r\n      newServerList.map((server) => {\r\n        if (server.name == id) {\r\n          server.messages.push({ email, message });\r\n        }\r\n      });\r\n      setServerList(newServerList);\r\n    });\r\n  }, []);\r\n  return (\r\n    <div className={styles.chat}>\r\n      <div className={styles.insideapp}>\r\n        <div className={styles.server}>\r\n          <ChatBar />\r\n        </div>\r\n        <div className={styles.leftside}>\r\n          {serverList.map((server) => {\r\n            return (\r\n              id === server.name &&\r\n              server.channels.map((channel) => {\r\n                return (\r\n                  <div key={channel.id} className={styles.channel}>\r\n                    <h3># {channel.name}</h3>\r\n                  </div>\r\n                );\r\n              })\r\n            );\r\n          })}\r\n        </div>\r\n        <div className={styles.middle}>\r\n          <div ref={scrollRef} className={styles.messagesView}>\r\n            {serverList.map((server) => {\r\n              return (\r\n                id === server.name &&\r\n                server.messages.map((message, index) => {\r\n                  return (\r\n                    <div key={index} className={styles.message}>\r\n                      <p>\r\n                        {message.email} : {message.message}\r\n                      </p>\r\n                    </div>\r\n                  );\r\n                })\r\n              );\r\n            })}\r\n          </div>\r\n          <input\r\n            onChange={(e) => {\r\n              setMessage(e.target.value);\r\n            }}\r\n            onKeyPress={(e) => handleSendMessage(e)}\r\n            className={styles.textBox}\r\n            type=\"text\"\r\n          />\r\n        </div>\r\n        <div className={styles.rightside}></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"]},"metadata":{},"sourceType":"module"}