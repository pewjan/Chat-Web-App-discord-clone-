[{"C:\\Users\\Rin\\Desktop\\Projects\\fortntie\\src\\index.js":"1","C:\\Users\\Rin\\Desktop\\Projects\\fortntie\\src\\reportWebVitals.js":"2","C:\\Users\\Rin\\Desktop\\Projects\\fortntie\\src\\App.js":"3","C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\index.js":"4","C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\App.js":"5","C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\reportWebVitals.js":"6","C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\components\\Home.js":"7","C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\components\\Navbar.js":"8","C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\components\\Login.js":"9","C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\context\\UserContext.js":"10","C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\context\\LoginContext.js":"11","C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\components\\Chat.js":"12","C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\components\\ChatBar.js":"13","C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\context\\ServerContext.js":"14","C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\components\\Register.js":"15","C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\context\\RegisteredContext.js":"16"},{"size":500,"mtime":1640581414460,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1640580762460,"results":"19","hashOfConfig":"18"},{"size":1688,"mtime":1640679604872,"results":"20","hashOfConfig":"18"},{"size":500,"mtime":1640581414460,"results":"21","hashOfConfig":"22"},{"size":3095,"mtime":1641933147091,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1640580762460,"results":"24","hashOfConfig":"22"},{"size":3599,"mtime":1642013450004,"results":"25","hashOfConfig":"22"},{"size":958,"mtime":1641008187022,"results":"26","hashOfConfig":"22"},{"size":3283,"mtime":1641933415811,"results":"27","hashOfConfig":"22"},{"size":87,"mtime":1640998260646,"results":"28","hashOfConfig":"22"},{"size":88,"mtime":1641832114167,"results":"29","hashOfConfig":"22"},{"size":8853,"mtime":1642031817535,"results":"30","hashOfConfig":"22"},{"size":1551,"mtime":1641569516012,"results":"31","hashOfConfig":"22"},{"size":89,"mtime":1641450589594,"results":"32","hashOfConfig":"22"},{"size":2895,"mtime":1641933448292,"results":"33","hashOfConfig":"22"},{"size":93,"mtime":1641932452077,"results":"34","hashOfConfig":"22"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jv105i",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"1hlwlgy",{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"43"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"43"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"43"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"43"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"43"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"C:\\Users\\Rin\\Desktop\\Projects\\fortntie\\src\\index.js",[],"C:\\Users\\Rin\\Desktop\\Projects\\fortntie\\src\\reportWebVitals.js",[],"C:\\Users\\Rin\\Desktop\\Projects\\fortntie\\src\\App.js",[],"C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\index.js",[],["74","75"],"C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\App.js",["76"],"import React, { useState, useEffect } from \"react\";\nimport Home from \"./components/Home\";\nimport Login from \"./components/Login\";\nimport Chat from \"./components/Chat\";\nimport ChatBar from \"./components/ChatBar\";\nimport Register from \"./components/Register\";\n\nimport { LoginContext } from \"./context/LoginContext.js\";\nimport { UserContext } from \"./context/UserContext.js\";\nimport { ServerContext } from \"./context/ServerContext\";\nimport { RegisteredContext } from \"./context/RegisteredContext\";\nimport \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nfunction App() {\n  const [registered, setRegistered] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [loginInfo, setLoginInfo] = useState({});\n  const [serverList, setServerList] = useState([\n    {\n      id: 1,\n      name: \"Public\",\n      image:\n        \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT8479Ucg3dNkErrscpa3BemM8RUp9Z68HV7w4TJpEL1meuvgETwTvYdJXWm5A1cqkcFA8&usqp=CAU\",\n      channels: [{ id: 1, name: \"Public Channel\" }],\n      messages: [],\n    },\n\n    {\n      id: 2,\n      name: \"Fortnite\",\n      image: \"https://i.imgur.com/13RZOhj.gif\",\n      channels: [\n        { id: 1, name: \"Fortnite Channel\" },\n        { id: 2, name: \"Fortnite Channel 2\" },\n      ],\n      messages: [],\n    },\n  ]);\n\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    if (loggedInUser) {\n      const foundUser = JSON.parse(loggedInUser);\n      setLoginInfo(foundUser);\n      setIsLoggedIn(true);\n    }\n  }, []);\n  return (\n    <Router>\n      <div className=\"App\">\n        <UserContext.Provider value={{ loginInfo, setLoginInfo }}>\n          <LoginContext.Provider value={{ isLoggedIn, setIsLoggedIn }}>\n            <ServerContext.Provider value={{ serverList, setServerList }}>\n              <RegisteredContext.Provider value={{ registered, setRegistered }}>\n                <Switch>\n                  <Route path=\"/register\">\n                    {isLoggedIn ? (\n                      <Redirect to=\"/app\" />\n                    ) : registered ? (\n                      <Redirect to=\"/login\" />\n                    ) : (\n                      <Register />\n                    )}\n                  </Route>\n                  <Route path=\"/login\">\n                    {isLoggedIn ? <Redirect to=\"/app\" /> : <Login />}\n                  </Route>\n\n                  <Route path={`/app/:id`}>\n                    {isLoggedIn ? <Chat /> : <Redirect to=\"/login\" />}\n                  </Route>\n                  <Route path=\"/app\">\n                    {!isLoggedIn ? (\n                      <Redirect to=\"/login\" />\n                    ) : (\n                      <Redirect to=\"/app/Public\" />\n                    )}\n                  </Route>\n                  <Route path=\"/\" component={Home}></Route>\n                </Switch>\n              </RegisteredContext.Provider>\n            </ServerContext.Provider>\n          </LoginContext.Provider>\n        </UserContext.Provider>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\components\\Home.js",["77"],"C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\components\\Navbar.js",["78"],"import React, { useState, useContext } from \"react\";\r\nimport \"./Navbar.css\";\r\nimport discordLogo from \"../images/discordlogo.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { LoginContext } from \"../context/LoginContext\";\r\nconst Navbar = () => {\r\n  const { isLoggedIn } = useContext(LoginContext);\r\n  return (\r\n    <>\r\n      <nav className=\"Navbar\">\r\n        <div className=\"mainlogo\">\r\n          <img className=\"discordLogo\" src={discordLogo} alt=\"\" />\r\n          <h1> Fortnite</h1>\r\n        </div>\r\n        <ul className=\"middlelinks\">\r\n          <li>Download</li>\r\n          <li>Nitro</li>\r\n          <li>Safety</li>\r\n          <li>Support</li>\r\n          <li>Blog</li>\r\n          <li>Careers</li>\r\n        </ul>\r\n        <p className=\"lastlink\">\r\n          <Link to={isLoggedIn ? \"/app\" : \"/login\"}>\r\n            {isLoggedIn ? \"Open Discord\" : \"Login\"}\r\n          </Link>\r\n        </p>\r\n      </nav>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\components\\Login.js",["79","80","81"],"import React, { useState, useContext } from \"react\";\r\nimport styles from \"./Login.module.css\";\r\nimport Qr from \"../images/qr.png\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { LoginContext } from \"../context/LoginContext\";\r\nimport { UserContext } from \"../context/UserContext\";\r\n\r\nconst Login = () => {\r\n  const { isLoggedIn, setIsLoggedIn } = useContext(LoginContext);\r\n  const { loginInfo, setLoginInfo } = useContext(UserContext);\r\n\r\n  const [info, setInfo] = useState({ email: \"\", password: \"\" });\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (info.email === \"\" || info.password === \"\") {\r\n      return;\r\n    } else {\r\n      await axios\r\n        .get(`http://localhost:4000/${info.email}`)\r\n        .then((res) => {\r\n          const { data } = res;\r\n          if (\r\n            info.email === data[0].email &&\r\n            info.password === data[0].password\r\n          ) {\r\n            setIsLoggedIn(true);\r\n            setLoginInfo(data[0]);\r\n            localStorage.setItem(\"user\", JSON.stringify(data[0]));\r\n            console.log(\"data set\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.Login}>\r\n      <form\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n        }}\r\n        className={styles.loginform}\r\n      >\r\n        <div className={styles.leftside}>\r\n          <div className={styles.logingreet}>\r\n            <h2 className={styles.loginTitle}>Welcome back!</h2>\r\n            <p>We're excited to see you again!</p>\r\n          </div>\r\n          <div className={styles.email}>\r\n            <label htmlFor=\"\">EMAIL OR PHONE NUMBER</label>\r\n            <input\r\n              required\r\n              onChange={(e) => {\r\n                const newInfo = info;\r\n                newInfo[\"email\"] = e.target.value;\r\n                setInfo(newInfo);\r\n              }}\r\n              type=\"email\"\r\n            />\r\n          </div>\r\n          <div className={styles.password}>\r\n            <label htmlFor=\"\">PASSWORD</label>\r\n            <input\r\n              required\r\n              onChange={(e) => {\r\n                const newInfo = info;\r\n                newInfo[\"password\"] = e.target.value;\r\n                setInfo(newInfo);\r\n              }}\r\n              type=\"text\"\r\n            />\r\n            <a href=\"#\">Forgot your password?</a>\r\n          </div>\r\n          <div className={styles.submitinfo}>\r\n            <button onClick={handleLogin} className={styles.submitbottom}>\r\n              Login\r\n            </button>\r\n            <p className={styles.register}>\r\n              Need an account? <Link to=\"/register\">Register</Link>\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className={styles.rightside}>\r\n          <div className={styles.content}>\r\n            <img className={styles.Qrpng} src={Qr} alt=\"\" />\r\n            <div className={styles.contenttext}>\r\n              <h3>Log in wth QR Code</h3>\r\n              <p>\r\n                Scan this with the Discord mobile <br />\r\n                app to log in instantly.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\context\\UserContext.js",[],"C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\context\\LoginContext.js",[],"C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\components\\Chat.js",["82","83","84","85","86","87","88","89","90","91","92","93","94","95","96"],"import React, { useState, useContext, useEffect, useRef } from \"react\";\r\n\r\nimport ClearIcon from \"@mui/icons-material/Clear\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\n\r\nimport { io } from \"socket.io-client\";\r\nimport { UserContext } from \"../context/UserContext\";\r\nimport { LoginContext } from \"../context/LoginContext\";\r\nimport { ServerContext } from \"../context/ServerContext\";\r\nimport styles from \"./Chat.module.css\";\r\nimport ChatBar from \"./ChatBar\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport cors from \"cors\";\r\nimport axios from \"axios\";\r\n\r\nconst socket = io(\"http://localhost:4000/\", {\r\n  transports: [\"websocket\", \"polling\"],\r\n});\r\n\r\nconst Chat = () => {\r\n  const { serverList, setServerList } = useContext(ServerContext);\r\n  const { isLoggedIn, setIsLoggedIn } = useContext(LoginContext);\r\n  const { loginInfo, setLoginInfo } = useContext(UserContext);\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [editMessageId, setEditMessageId] = useState({});\r\n  const [message, setMessage] = useState(\"\");\r\n  const [showServer, setShowServer] = useState(null);\r\n\r\n  const { email } = loginInfo;\r\n\r\n  const { id } = useParams();\r\n\r\n  const scrollRef = useRef();\r\n  const messageRef = useRef();\r\n  const textBoxRef = useRef();\r\n\r\n  const handleMouseEnter = (id) => {\r\n    setShowServer(id);\r\n  };\r\n  const handleMouseLeave = (id) => {\r\n    setShowServer(null);\r\n  };\r\n  const handleLogOut = () => {\r\n    localStorage.removeItem(\"user\");\r\n    setIsLoggedIn(false);\r\n  };\r\n  const handleSendMessage = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      socket.emit(\"message\", { email, message, id });\r\n      e.target.value = \"\";\r\n    }\r\n  };\r\n\r\n  const handleRemove = async (e, id, email, message, _id) => {\r\n    if (loginInfo.email === email) {\r\n      await axios\r\n        .delete(`http://localhost:4000/messages/`, {\r\n          data: { id, _id },\r\n        })\r\n        .then(() => {\r\n          socket.emit(\"deletedMessage\", { email, message, id, _id });\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleEdit = async (e, email, _id, id) => {\r\n    setEditMode(false);\r\n    setEditMessageId({});\r\n    if (loginInfo.email === email) {\r\n      await axios\r\n        .patch(`http://localhost:4000/editMessage`, {\r\n          newMessage: e.target.value,\r\n          _id: _id,\r\n          id: id,\r\n        })\r\n        .then(() => {\r\n          e.target.value = \"\";\r\n          socket.emit(\"updatedMessage\", { email, message, id, _id });\r\n        });\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    socket.emit(\"changeRoom\", id);\r\n    axios.get(`http://localhost:4000/app/${id}`).then((res) => {\r\n      const { data } = res;\r\n      const messages = [...data];\r\n      const newServerList = [...serverList];\r\n      newServerList.map((server) => {\r\n        if (server.name == id) {\r\n          server.messages = messages;\r\n        }\r\n      });\r\n      setServerList(newServerList);\r\n      textBoxRef.current.focus();\r\n      scrollRef.current.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"end\",\r\n        inline: \"start\",\r\n      });\r\n    });\r\n  }, [id]);\r\n  useEffect(() => {\r\n    const handleMessage = ({ email, message, id, _id }) => {\r\n      const newServerList = [...serverList];\r\n      newServerList.map((server) => {\r\n        if (server.name == id) {\r\n          server.messages.push({ email, message, _id });\r\n        }\r\n      });\r\n      setServerList(newServerList);\r\n      scrollRef.current.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"end\",\r\n        inline: \"start\",\r\n      });\r\n    };\r\n    const handleMessageDelete = ({ email, message, id, _id }) => {\r\n      const newServerList = [...serverList];\r\n      newServerList.map((server) => {\r\n        if (server.name == id) {\r\n          server.messages = server.messages.filter((item) => {\r\n            return item._id !== _id;\r\n          });\r\n        }\r\n      });\r\n      setServerList(newServerList);\r\n    };\r\n    const handleMessageUpdate = ({ email, message, id, _id }) => {\r\n      const newServerList = [...serverList];\r\n      const newMessage = { email, message, _id };\r\n      for (let server in newServerList) {\r\n        if (newServerList[server].name == id) {\r\n          for (let message in newServerList[server].messages) {\r\n            if (newServerList[server].messages[message]._id === _id) {\r\n              newServerList[server].messages[message] = newMessage;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      setServerList(newServerList);\r\n    };\r\n    socket.on(\"message\", handleMessage);\r\n\r\n    socket.on(\"deletedMessage\", handleMessageDelete);\r\n\r\n    socket.on(\"updatedMessage\", handleMessageUpdate);\r\n\r\n    return () => {\r\n      socket.off(\"message\", handleMessage);\r\n      socket.off(\"deletedMessage\", handleMessageDelete);\r\n      socket.off(\"updatedMessage\", handleMessageUpdate);\r\n    };\r\n    //    socket.on(\"message\", ({ email, message, id }) => {\r\n    //      const newServerList = [...serverList];\r\n    //      newServerList.map((server) => {\r\n    //        if (server.name == id) {\r\n    //          server.messages.push({ email, message });\r\n    //        }\r\n    //      });\r\n    //      setServerList(newServerList);\r\n    //      scrollRef.current.scrollIntoView({\r\n    //        behavior: \"smooth\",\r\n    //        block: \"end\",\r\n    //        inline: \"start\",\r\n    //      });\r\n    //    });\r\n    //    return () => {\r\n    //      socket.off(\"message\");\r\n    //    };\r\n  }, []);\r\n  return (\r\n    <div className={styles.chat}>\r\n      <div className={styles.insideapp}>\r\n        <div className={styles.server}>\r\n          <ChatBar />\r\n        </div>\r\n        <div className={styles.leftside}>\r\n          <div className={styles.channelList}>\r\n            {serverList.map((server) => {\r\n              return (\r\n                id === server.name &&\r\n                server.channels.map((channel) => {\r\n                  return (\r\n                    <div key={channel.id} className={styles.channel}>\r\n                      <h3># {channel.name}</h3>\r\n                    </div>\r\n                  );\r\n                })\r\n              );\r\n            })}\r\n          </div>\r\n          <div className={styles.logout}>\r\n            <h5\r\n              onClick={() => {\r\n                handleLogOut();\r\n              }}\r\n            >\r\n              Logout\r\n            </h5>\r\n          </div>\r\n        </div>\r\n        <div className={styles.middle}>\r\n          <div className={styles.messagesView}>\r\n            {serverList.map((server) => {\r\n              return (\r\n                id === server.name &&\r\n                server.messages.map((message, index) => {\r\n                  return (\r\n                    <div ref={scrollRef} key={index} className={styles.message}>\r\n                      <p>{message.email}</p>\r\n                      <div className={styles.messageInfo}>\r\n                        <p ref={messageRef}>{message.message}</p>\r\n                        {message.email === loginInfo.email && (\r\n                          <div>\r\n                            <EditIcon\r\n                              onClick={(e) => {\r\n                                textBoxRef.current.focus();\r\n                                setEditMode(true);\r\n                                setEditMessageId({\r\n                                  _id: message._id,\r\n                                  email: message.email,\r\n                                });\r\n                              }}\r\n                              className={styles.messageEdit}\r\n                            />\r\n                            <ClearIcon\r\n                              onClick={(e) => {\r\n                                textBoxRef.current.focus();\r\n                                handleRemove(\r\n                                  e,\r\n                                  id,\r\n                                  message.email,\r\n                                  message.message,\r\n                                  message._id\r\n                                );\r\n                              }}\r\n                              className={styles.messageRemove}\r\n                            />\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })\r\n              );\r\n            })}\r\n          </div>\r\n          <input\r\n            ref={textBoxRef}\r\n            onChange={(e) => {\r\n              setMessage(e.target.value);\r\n            }}\r\n            onKeyPress={(e) =>\r\n              editMode\r\n                ? e.key === \"Enter\" &&\r\n                  handleEdit(e, editMessageId.email, editMessageId._id, id)\r\n                : handleSendMessage(e)\r\n            }\r\n            className={styles.textBox}\r\n            type=\"text\"\r\n          />\r\n        </div>\r\n        <div className={styles.rightside}></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\components\\ChatBar.js",["97","98"],"import React, { useState, useContext } from \"react\";\r\nimport styles from \"./ChatBar.module.css\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { ServerContext } from \"../context/ServerContext\";\r\n\r\nconst ChatBar = () => {\r\n  const { serverList, setServerList } = useContext(ServerContext);\r\n  const [showServer, setShowServer] = useState(null);\r\n  const { id } = useParams();\r\n\r\n  const handleMouseEnter = (id) => {\r\n    setShowServer(id);\r\n  };\r\n  const handleMouseLeave = (id) => {\r\n    setShowServer(null);\r\n  };\r\n  return (\r\n    <div className={styles.ChatBar}>\r\n      {serverList.map((server) => {\r\n        return (\r\n          <div className={styles.serverIcon} id={server.id} key={server.id}>\r\n            <Link to={`/app/${server.name}`}>\r\n              <div className=\"line\"></div>\r\n              <img\r\n                className={\r\n                  server.name == id\r\n                    ? styles.serverIconImageClicked\r\n                    : styles.serverIconImage\r\n                }\r\n                onMouseEnter={() => handleMouseEnter(server.id)}\r\n                onMouseLeave={() => handleMouseLeave(server.id)}\r\n                src={server.image}\r\n                alt=\"\"\r\n              />\r\n            </Link>\r\n\r\n            {server.id === showServer && (\r\n              <div className={styles.serverIconNameBackground}>\r\n                <p className={styles.serverIconName}>{server.name}</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBar;\r\n","C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\context\\ServerContext.js",[],"C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\components\\Register.js",["99","100","101","102"],"import React, { useState, useContext } from \"react\";\r\nimport styles from \"./Register.module.css\";\r\nimport { RegisteredContext } from \"../context/RegisteredContext\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { Redirect } from \"react-router-dom\";\r\nconst Register = () => {\r\n  const { setRegistered } = useContext(RegisteredContext);\r\n  const [info, setInfo] = useState({ email: \"\", password: \"\" });\r\n  const handleRegister = async (e) => {\r\n    e.preventDefault();\r\n    if (info.email === \"\" || info.password === \"\") {\r\n      return;\r\n    } else {\r\n      await axios\r\n        .get(`http://localhost:4000/${info.email}`)\r\n        .then(async (res) => {\r\n          if (res.data.length == 0) {\r\n            await axios\r\n              .post(`http://localhost:4000/register`, {\r\n                email: info.email,\r\n                password: info.password,\r\n              })\r\n              .then((res) => {\r\n                if (res.status === 200) {\r\n                  console.log(\"new account created!\");\r\n                  setRegistered(true);\r\n                }\r\n              });\r\n          } else {\r\n            console.log(\"account already exists\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n  return (\r\n    <div className={styles.Register}>\r\n      <form className={styles.registerform}>\r\n        <div className={styles.logingreet}>\r\n          <h2 className={styles.loginTitle}>Create an account</h2>\r\n        </div>\r\n        <div className={styles.email}>\r\n          <label htmlFor=\"\">EMAIL</label>\r\n          <input\r\n            onChange={(e) => {\r\n              const newInfo = { ...info };\r\n              newInfo.email = e.target.value;\r\n              setInfo(newInfo);\r\n            }}\r\n            type=\"email\"\r\n          />\r\n        </div>\r\n        <div className={styles.password}>\r\n          <label htmlFor=\"\">PASSWORD</label>\r\n          <input\r\n            onChange={(e) => {\r\n              const newInfo = { ...info };\r\n              newInfo.password = e.target.value;\r\n              setInfo(newInfo);\r\n            }}\r\n            required\r\n            type=\"text\"\r\n          />\r\n        </div>\r\n        <div className={styles.submitinfo}>\r\n          <button\r\n            onClick={(e) => {\r\n              handleRegister(e);\r\n            }}\r\n            className={styles.submitbottom}\r\n          >\r\n            Continue\r\n          </button>\r\n          <p className={styles.register}>\r\n            <Link to=\"/login\">Already have an account?</Link>\r\n          </p>\r\n        </div>\r\n\r\n        <div className={styles.registerPolicy}>\r\n          <p>\r\n            By registering, you agree to Discord's{\" \"}\r\n            <a href=\"#\">Terms of Service</a> and <a href=\"#\">Privacy Policy</a>\r\n          </p>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","C:\\Users\\Rin\\Desktop\\Projects\\discord-clone\\client\\src\\context\\RegisteredContext.js",[],{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":5,"column":8,"nodeType":"109","messageId":"110","endLine":5,"endColumn":15},{"ruleId":"107","severity":1,"message":"111","line":6,"column":8,"nodeType":"109","messageId":"110","endLine":6,"endColumn":20},{"ruleId":"107","severity":1,"message":"112","line":1,"column":17,"nodeType":"109","messageId":"110","endLine":1,"endColumn":25},{"ruleId":"107","severity":1,"message":"113","line":10,"column":11,"nodeType":"109","messageId":"110","endLine":10,"endColumn":21},{"ruleId":"107","severity":1,"message":"114","line":11,"column":11,"nodeType":"109","messageId":"110","endLine":11,"endColumn":20},{"ruleId":"115","severity":1,"message":"116","line":76,"column":13,"nodeType":"117","endLine":76,"endColumn":25},{"ruleId":"107","severity":1,"message":"118","line":13,"column":8,"nodeType":"109","messageId":"110","endLine":13,"endColumn":12},{"ruleId":"107","severity":1,"message":"113","line":22,"column":11,"nodeType":"109","messageId":"110","endLine":22,"endColumn":21},{"ruleId":"107","severity":1,"message":"119","line":23,"column":22,"nodeType":"109","messageId":"110","endLine":23,"endColumn":34},{"ruleId":"107","severity":1,"message":"120","line":27,"column":10,"nodeType":"109","messageId":"110","endLine":27,"endColumn":20},{"ruleId":"107","severity":1,"message":"121","line":37,"column":9,"nodeType":"109","messageId":"110","endLine":37,"endColumn":25},{"ruleId":"107","severity":1,"message":"122","line":40,"column":9,"nodeType":"109","messageId":"110","endLine":40,"endColumn":25},{"ruleId":"123","severity":1,"message":"124","line":88,"column":34,"nodeType":"125","messageId":"126","endLine":88,"endColumn":36},{"ruleId":"127","severity":1,"message":"128","line":89,"column":25,"nodeType":"129","messageId":"130","endLine":89,"endColumn":27},{"ruleId":"131","severity":1,"message":"132","line":101,"column":6,"nodeType":"133","endLine":101,"endColumn":10,"suggestions":"134"},{"ruleId":"123","severity":1,"message":"124","line":105,"column":34,"nodeType":"125","messageId":"126","endLine":105,"endColumn":36},{"ruleId":"127","severity":1,"message":"128","line":106,"column":25,"nodeType":"129","messageId":"130","endLine":106,"endColumn":27},{"ruleId":"123","severity":1,"message":"124","line":119,"column":34,"nodeType":"125","messageId":"126","endLine":119,"endColumn":36},{"ruleId":"127","severity":1,"message":"128","line":120,"column":25,"nodeType":"129","messageId":"130","endLine":120,"endColumn":27},{"ruleId":"127","severity":1,"message":"128","line":132,"column":40,"nodeType":"129","messageId":"130","endLine":132,"endColumn":42},{"ruleId":"131","severity":1,"message":"132","line":170,"column":6,"nodeType":"133","endLine":170,"endColumn":8,"suggestions":"135"},{"ruleId":"107","severity":1,"message":"136","line":7,"column":23,"nodeType":"109","messageId":"110","endLine":7,"endColumn":36},{"ruleId":"127","severity":1,"message":"128","line":26,"column":31,"nodeType":"129","messageId":"130","endLine":26,"endColumn":33},{"ruleId":"107","severity":1,"message":"137","line":6,"column":10,"nodeType":"109","messageId":"110","endLine":6,"endColumn":18},{"ruleId":"127","severity":1,"message":"128","line":18,"column":31,"nodeType":"129","messageId":"130","endLine":18,"endColumn":33},{"ruleId":"115","severity":1,"message":"116","line":85,"column":13,"nodeType":"117","endLine":85,"endColumn":25},{"ruleId":"115","severity":1,"message":"116","line":85,"column":50,"nodeType":"117","endLine":85,"endColumn":62},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],"no-unused-vars","'ChatBar' is defined but never used.","Identifier","unusedVar","'DownloadIcon' is defined but never used.","'useState' is defined but never used.","'isLoggedIn' is assigned a value but never used.","'loginInfo' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'cors' is defined but never used.","'setLoginInfo' is assigned a value but never used.","'showServer' is assigned a value but never used.","'handleMouseEnter' is assigned a value but never used.","'handleMouseLeave' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'serverList' and 'setServerList'. Either include them or remove the dependency array.","ArrayExpression",["140"],["141"],"'setServerList' is assigned a value but never used.","'Redirect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},"Update the dependencies array to be: [id, serverList, setServerList]",{"range":"146","text":"147"},"Update the dependencies array to be: [serverList, setServerList]",{"range":"148","text":"149"},[3053,3057],"[id, serverList, setServerList]",[5385,5387],"[serverList, setServerList]"]